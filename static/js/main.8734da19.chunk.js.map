{"version":3,"sources":["components/context/Context.js","components/employeesListItem/index.js","components/employeesListItem/employeesListItem.jsx","components/employeesByLetterGroup/index.js","components/employeesByLetterGroup/employeesByLetterGroup.jsx","components/employeesList/index.js","components/employeesList/employeesList.jsx","components/employees/index.js","components/employees/employees.jsx","components/employeesDobListItem/index.js","components/employeesDobListItem/employeesDobListItem.jsx","components/employeesDobByMonthGroup/index.js","components/employeesDobByMonthGroup/employeesDobByMonthGroup.jsx","components/employeesDobList/index.js","components/employeesDobList/employeesDobList.jsx","components/employeesDob/index.js","components/employeesDob/employeesDob.jsx","components/loading/index.js","components/loading/loading.jsx","components/err/index.js","components/err/err.jsx","components/app/index.js","components/app/app.jsx","index.js"],"names":["Context","React","createContext","EmployeesListItem","employee","useState","checked","setChecked","useContext","addToCheckedEmployees","removeFromCheckedEmployees","useEffect","getLocalChecked","saveLocalChecked","localStorage","getItem","id","setItem","JSON","parse","stringify","employeeInfo","lastName","firstName","className","type","onChange","EmployeesByLetterGroup","letter","employeesByLetterGroup","length","map","EmployeesList","employees","_ALPHABETLETTERS","filter","Employees","EmployeesDobListItem","checkedEmployee","formatDate","dob","employeeDobInfo","EmployeesDobByMonthGroup","month","checkedEmployeesByMonthGroup","EmployeesDobList","checkedEmployees","_MONTHS","getEmployeeDobMonth","Loading","Err","App","setEmployees","setCheckedEmployees","loading","setLoading","isError","setIsError","getEmployees","getLocalCheckedEmployees","saveLocalCheckedEmployees","axios","get","then","response","data","catch","error","console","log","defineMonth","view","Provider","value","prevState","item","date","d","Date","getDate","getMonth","getFullYear","employeeDob","errorMessage","loadingMessage","content","ReactDOM","render","document","getElementById"],"mappings":"sbACaA,EAAUC,IAAMC,gBCAdC,G,MCEW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACVC,oBAAS,GADC,mBACjCC,EADiC,KACxBC,EADwB,OAEsBC,qBAC1DR,GADIS,EAFgC,EAEhCA,sBAAuBC,EAFS,EAETA,2BAG/BC,qBAAU,WACNC,MAED,IAEHD,qBAAU,WACNE,MAED,CAACP,IAEJ,IAKMM,EAAkB,WAC2B,OAA3CE,aAAaC,QAAb,UAAwBX,EAASY,KACjCF,aAAaG,QAAb,UAAwBb,EAASY,KAAM,GAEvCT,EAAWW,KAAKC,MAAML,aAAaC,QAAb,UAAwBX,EAASY,QAIzDH,EAAmB,WACrBC,aAAaG,QAAb,UAAwBb,EAASY,IAAME,KAAKE,UAAUd,KAEpDe,EAAY,UAAMjB,EAASkB,SAAf,YAA2BlB,EAASmB,WACtD,OACI,sBAAKC,UAAU,sBAAf,UACI,+BAAOH,IACP,+BACI,uBACII,KAAK,WACLC,SAAU,WAtBtBnB,GAAYD,GAwBIA,EACMI,EAA2BN,EAASY,IACpCP,EAAsBL,IAEhCE,QAASA,WC9CdqB,G,MCEgB,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,uBACtC,OACI,sBAAKL,UAAU,4BAAf,UACI,qBAAKA,UAAU,mCAAf,SAAmDI,IAChB,IAAlCC,EAAuBC,OACpB,yCAEAD,EAAuBE,KAAI,SAAC3B,GAAD,OACvB,cAAC,EAAD,CAAqCA,SAAUA,GAAvBA,EAASY,YCVtCgB,G,MCIO,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACbC,EAAqB1B,qBAAWR,GAAhCkC,iBACR,OACI,qBAAKV,UAAU,iBAAf,SACKU,EAAiBH,KAAI,SAACH,GACnB,IAAMC,EAAyBI,EAAUE,QACrC,SAAC/B,GAAD,OAAcA,EAASkB,SAAS,KAAOM,KAE3C,OACI,cAAC,EAAD,CAEIA,OAAQA,EACRC,uBAAwBA,GAFnBD,UCddQ,G,MCEG,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,UACjB,OACI,sBAAKT,UAAU,YAAf,UACI,qBAAKA,UAAU,mBAAf,uBACA,cAAC,EAAD,CAAeS,UAAWA,SCNvBI,G,MCGc,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBACpBC,EAAe/B,qBAAWR,GAA1BuC,WACAhB,EAA6Be,EAA7Bf,UAAWD,EAAkBgB,EAAlBhB,SAAUkB,EAAQF,EAARE,IACvBC,EAAe,UAAMnB,EAAN,YAAkBC,EAAlB,cAAiCgB,EAAWC,IACjE,OAAO,oBAAIhB,UAAU,0BAAd,SAAyCiB,MCPrCC,G,MCEkB,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,6BACvC,OACI,sBAAKpB,UAAU,+BAAf,UACI,qBAAKA,UAAU,sCAAf,SAAsDmB,IACrDC,EAA6Bb,KAAI,SAACO,GAAD,OAC9B,cAAC,EAAD,CAEIA,gBAAiBA,GADZA,EAAgBtB,YCR1B6B,G,MCIU,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,iBAAuB,EACNtC,qBAAWR,GAA5C+C,EADuC,EACvCA,QAASC,EAD8B,EAC9BA,oBAEjB,OACI,qBAAKxB,UAAU,qBAAf,SACKuB,EAAQhB,KAAI,SAACY,GACV,IAAMC,EAA+BE,EAAiBX,QAClD,SAACG,GAAD,OACIU,EAAoBV,EAAgBE,OAASG,KAErD,OAA+C,IAAxCC,EAA6Bd,OAAe,KAC/C,cAAC,EAAD,CAEIa,MAAOA,EACPC,6BACIA,GAHCD,UChBdE,G,MCGM,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,iBACpB,OACI,sBAAKtB,UAAU,gBAAf,UACI,qBAAKA,UAAU,uBAAf,gCAC6B,IAA5BsB,EAAiBhB,OACd,qBAAKN,UAAU,wBAAf,mCAIA,cAAC,EAAD,CAAkBsB,iBAAkBA,SCZrCG,G,MCEC,WACZ,OACI,qBAAKzB,UAAU,UAAf,SACI,+CCLG0B,G,MCEH,WACR,OACI,qBAAK1B,UAAU,QAAf,SACI,iECLG2B,G,MCWH,WAAO,IAAD,EACoB9C,mBAAS,IAD7B,mBACP4B,EADO,KACImB,EADJ,OAEkC/C,mBAAS,IAF3C,mBAEPyC,EAFO,KAEWO,EAFX,OAGgBhD,oBAAS,GAHzB,mBAGPiD,EAHO,KAGEC,EAHF,OAIgBlD,oBAAS,GAJzB,mBAIPmD,EAJO,KAIEC,EAJF,KAMd9C,qBAAU,WACN+C,IACAC,MAED,IAEHhD,qBAAU,WACNiD,MAED,CAACd,IAGJ,IAAMY,EAAe,WACjB,OAAOG,IACFC,IADE,kEAIFC,MAAK,SAACC,GACHZ,EAAaY,EAASC,SAEzBC,OAAM,SAAUC,GACbZ,GAAW,GACXE,GAAW,GACXW,QAAQC,IAAIF,MAEfJ,MAAK,WACFR,GAAW,OAKjBI,EAA2B,WACoB,OAA7C7C,aAAaC,QAAb,oBACAD,aAAaG,QAAb,mBAAyC,IAEzCoC,EACInC,KAAKC,MAAML,aAAaC,QAAb,uBAKjB6C,EAA4B,WAC9B9C,aAAaG,QAAb,mBAEIC,KAAKE,UAAU0B,KA6DjBwB,EAAc,SAAC3B,GACjB,OAAQA,EAAQ,GACZ,KAAK,EACD,MAAO,UACX,KAAK,EACD,MAAO,WACX,KAAK,EACD,MAAO,QACX,KAAK,EACD,MAAO,QACX,KAAK,EACD,MAAO,MACX,KAAK,EACD,MAAO,OACX,KAAK,EACD,MAAO,OACX,KAAK,EACD,MAAO,SACX,KAAK,EACD,MAAO,YACX,KAAK,GACD,MAAO,UACX,KAAK,GACD,MAAO,WACX,KAAK,GACD,MAAO,WACX,QACI,OAAO,OAgBb4B,EACF,eAACvE,EAAQwE,SAAT,CACIC,MAAO,CACHxC,YACAmB,eACAN,mBACAO,sBACA5C,sBA3GkB,SAACL,GAC3BiD,GAAoB,SAACqB,GACjB,MAAM,GAAN,mBAAWA,GAAX,CAAsBtE,QA0GlBM,2BAvGuB,SAACM,GAChCqC,GAAoB,SAACqB,GACjB,OAAOA,EAAUvC,QAAO,SAACwC,GAAD,OAAUA,EAAK3D,KAAOA,SAuG1CkB,iBAjGa,CACrB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAwEQa,QArEI,CACZ,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YA2DQR,WAzBO,SAACqC,GAChB,IAAMC,EAAI,IAAIC,KAAKA,KAAK3D,MAAMyD,IAC9B,MAAM,GAAN,OAAUC,EAAEE,UAAZ,YAAyBT,EACrBO,EAAEG,YADN,aAEMH,EAAEI,cAFR,UAwBQjC,oBAnBgB,SAACkC,GACzB,IAAML,EAAI,IAAIC,KAAKA,KAAK3D,MAAM+D,IAC9B,MAAM,GAAN,OAAUZ,EAAYO,EAAEG,eAIxB,UAgBI,cAAC,EAAD,CAAW/C,UAAWA,IACtB,cAAC,EAAD,CAAca,iBAAkBA,OAKlCqC,EAAe3B,EAAU,cAAC,EAAD,IAAU,KACnC4B,EAAiB9B,EAAU,cAAC,EAAD,IAAc,KACzC+B,EAAY/B,GAAWE,EAAkB,KAAPe,EAExC,OACI,sBAAK/C,UAAU,MAAf,UACK2D,EACAC,EACAC,O,MChMbC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.8734da19.chunk.js","sourcesContent":["import React from \"react\";\r\nexport const Context = React.createContext();\r\n","import EmployeesListItem from \"./employeesListItem\";\r\nexport default EmployeesListItem;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Context } from \"../context/Context\";\r\nimport \"./employeesListItem.css\";\r\nconst EmployeesListItem = ({ employee }) => {\r\n    const [checked, setChecked] = useState(false);\r\n    const { addToCheckedEmployees, removeFromCheckedEmployees } = useContext(\r\n        Context\r\n    );\r\n    useEffect(() => {\r\n        getLocalChecked();\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        saveLocalChecked();\r\n        // eslint-disable-next-line\r\n    }, [checked]);\r\n\r\n    const toggleChecked = () => {\r\n        setChecked(!checked);\r\n    };\r\n\r\n    // get checked from local\r\n    const getLocalChecked = () => {\r\n        if (localStorage.getItem(`${employee.id}`) === null) {\r\n            localStorage.setItem(`${employee.id}`, false);\r\n        } else {\r\n            setChecked(JSON.parse(localStorage.getItem(`${employee.id}`)));\r\n        }\r\n    };\r\n    // save checked to local\r\n    const saveLocalChecked = () => {\r\n        localStorage.setItem(`${employee.id}`, JSON.stringify(checked));\r\n    };\r\n    const employeeInfo = `${employee.lastName} ${employee.firstName}`;\r\n    return (\r\n        <div className=\"employees-list-item\">\r\n            <span>{employeeInfo}</span>\r\n            <span>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    onChange={() => {\r\n                        toggleChecked();\r\n                        checked\r\n                            ? removeFromCheckedEmployees(employee.id)\r\n                            : addToCheckedEmployees(employee);\r\n                    }}\r\n                    checked={checked}\r\n                />\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EmployeesListItem;\r\n","import EmployeesByLetterGroup from \"./employeesByLetterGroup\";\r\nexport default EmployeesByLetterGroup;\r\n","import React from \"react\";\r\nimport EmployeesListItem from \"../employeesListItem\";\r\nimport \"./employeesByLetterGroup.css\";\r\nconst EmployeesByLetterGroup = ({ letter, employeesByLetterGroup }) => {\r\n    return (\r\n        <div className=\"employees-by-letter-group\">\r\n            <div className=\"employees-by-letter-group-header\">{letter}</div>\r\n            {employeesByLetterGroup.length === 0 ? (\r\n                <span>- - -</span>\r\n            ) : (\r\n                employeesByLetterGroup.map((employee) => (\r\n                    <EmployeesListItem key={employee.id} employee={employee} />\r\n                ))\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EmployeesByLetterGroup;\r\n","import EmployeesList from \"./employeesList\";\r\nexport default EmployeesList;\r\n","import React, { useContext } from \"react\";\r\nimport EmployeesByLetterGroup from \"../employeesByLetterGroup\";\r\nimport { Context } from \"../context/Context\";\r\nimport \"./employeesList.css\";\r\n\r\nconst EmployeesList = ({ employees }) => {\r\n    const { _ALPHABETLETTERS } = useContext(Context);\r\n    return (\r\n        <div className=\"employees-list\">\r\n            {_ALPHABETLETTERS.map((letter) => {\r\n                const employeesByLetterGroup = employees.filter(\r\n                    (employee) => employee.lastName[0] === letter\r\n                );\r\n                return (\r\n                    <EmployeesByLetterGroup\r\n                        key={letter}\r\n                        letter={letter}\r\n                        employeesByLetterGroup={employeesByLetterGroup}\r\n                    />\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\nexport default EmployeesList;\r\n","import Employees from \"./employees\";\r\nexport default Employees;\r\n","import React from \"react\";\r\nimport EmployeesList from \"../employeesList\";\r\nimport \"./employees.css\";\r\nconst Employees = ({ employees }) => {\r\n    return (\r\n        <div className=\"employees\">\r\n            <div className=\"employees-header\">Employees</div>\r\n            <EmployeesList employees={employees} />\r\n        </div>\r\n    );\r\n};\r\nexport default Employees;\r\n","import EmployeesDobListItem from \"./employeesDobListItem\";\r\nexport default EmployeesDobListItem;\r\n","import React, { useContext } from \"react\";\r\nimport { Context } from \"../context/Context\";\r\nimport \"./employeesDobListItem.css\";\r\n\r\nconst EmployeesDobListItem = ({ checkedEmployee }) => {\r\n    const { formatDate } = useContext(Context);\r\n    const { firstName, lastName, dob } = checkedEmployee;\r\n    const employeeDobInfo = `${lastName} ${firstName} - ${formatDate(dob)}`;\r\n    return <li className=\"employees-dob-list-item\">{employeeDobInfo}</li>;\r\n};\r\n\r\nexport default EmployeesDobListItem;\r\n","import EmployeesDobByMonthGroup from \"./employeesDobByMonthGroup\";\r\nexport default EmployeesDobByMonthGroup;\r\n","import React from \"react\";\r\nimport EmployeesDobListItem from \"../employeesDobListItem\";\r\nimport \"./employeesDobByMonthGroup.css\";\r\nconst EmployeesDobByMonthGroup = ({ month, checkedEmployeesByMonthGroup }) => {\r\n    return (\r\n        <div className=\"employees-dob-by-month-group\">\r\n            <div className=\"employees-dob-by-month-group-header\">{month}</div>\r\n            {checkedEmployeesByMonthGroup.map((checkedEmployee) => (\r\n                <EmployeesDobListItem\r\n                    key={checkedEmployee.id}\r\n                    checkedEmployee={checkedEmployee}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\nexport default EmployeesDobByMonthGroup;\r\n","import EmployeesDobList from \"./employeesDobList\";\r\nexport default EmployeesDobList;\r\n","import React, { useContext } from \"react\";\r\nimport EmployeesDobByMonthGroup from \"../employeesDobByMonthGroup\";\r\nimport { Context } from \"../context/Context\";\r\nimport \"./employeesDobList.css\";\r\n\r\nconst EmployeesDobList = ({ checkedEmployees }) => {\r\n    const { _MONTHS, getEmployeeDobMonth } = useContext(Context);\r\n\r\n    return (\r\n        <div className=\"employees-dob-list\">\r\n            {_MONTHS.map((month) => {\r\n                const checkedEmployeesByMonthGroup = checkedEmployees.filter(\r\n                    (checkedEmployee) =>\r\n                        getEmployeeDobMonth(checkedEmployee.dob) === month\r\n                );\r\n                return checkedEmployeesByMonthGroup.length === 0 ? null : (\r\n                    <EmployeesDobByMonthGroup\r\n                        key={month}\r\n                        month={month}\r\n                        checkedEmployeesByMonthGroup={\r\n                            checkedEmployeesByMonthGroup\r\n                        }\r\n                    />\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EmployeesDobList;\r\n","import EmployeesDobList from \"./employeesDob\";\r\nexport default EmployeesDobList;\r\n","import React from \"react\";\r\nimport EmployeesDobList from \"../employeesDobList\";\r\nimport \"./employeesDob.css\";\r\n\r\nconst EmployeesDob = ({ checkedEmployees }) => {\r\n    return (\r\n        <div className=\"employees-dob\">\r\n            <div className=\"employees-dob-header\">Employees birthday</div>\r\n            {checkedEmployees.length === 0 ? (\r\n                <div className=\"no-selected-employyes\">\r\n                    No selected employees\r\n                </div>\r\n            ) : (\r\n                <EmployeesDobList checkedEmployees={checkedEmployees} />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EmployeesDob;\r\n","import Loading from \"./loading\";\r\nexport default Loading;\r\n","import React from \"react\";\r\nimport \"./loading.css\";\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <div className=\"loading\">\r\n            <p>loading...</p>\r\n        </div>\r\n    );\r\n};\r\nexport default Loading;\r\n","import Err from \"./err\";\r\nexport default Err;\r\n","import React from \"react\";\r\nimport \"./err.css\";\r\n\r\nconst Err = () => {\r\n    return (\r\n        <div className=\"error\">\r\n            <p>Oops,something went wrong :(</p>\r\n        </div>\r\n    );\r\n};\r\nexport default Err;\r\n","import App from \"./app\";\r\nexport default App;\r\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n// import Components\nimport Employees from \"../employees\";\nimport EmployeesDob from \"../employeesDob\";\nimport Loading from \"../loading\";\nimport Err from \"../err\";\n// import Context\nimport { Context } from \"../context/Context\";\n// import Css\nimport \"./app.css\";\n\nconst App = () => {\n    const [employees, setEmployees] = useState([]);\n    const [checkedEmployees, setCheckedEmployees] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [isError, setIsError] = useState(false);\n\n    useEffect(() => {\n        getEmployees();\n        getLocalCheckedEmployees();\n        // eslint-disable-next-line\n    }, []);\n\n    useEffect(() => {\n        saveLocalCheckedEmployees();\n        // eslint-disable-next-line\n    }, [checkedEmployees]);\n\n    // get employees from api\n    const getEmployees = () => {\n        return axios\n            .get(\n                `https://yalantis-react-school-api.yalantis.com/api/task0/users`\n            )\n            .then((response) => {\n                setEmployees(response.data);\n            })\n            .catch(function (error) {\n                setLoading(false);\n                setIsError(true);\n                console.log(error);\n            })\n            .then(() => {\n                setLoading(false);\n            });\n    };\n    // local checkedEmployess\n    // get checkedEmployees\n    const getLocalCheckedEmployees = () => {\n        if (localStorage.getItem(`checkedEmployees`) === null) {\n            localStorage.setItem(`checkedEmployees`, []);\n        } else {\n            setCheckedEmployees(\n                JSON.parse(localStorage.getItem(`checkedEmployees`))\n            );\n        }\n    };\n    // save checkedEmployees to local\n    const saveLocalCheckedEmployees = () => {\n        localStorage.setItem(\n            `checkedEmployees`,\n            JSON.stringify(checkedEmployees)\n        );\n    };\n\n    const addToCheckedEmployees = (employee) => {\n        setCheckedEmployees((prevState) => {\n            return [...prevState, employee];\n        });\n    };\n    const removeFromCheckedEmployees = (id) => {\n        setCheckedEmployees((prevState) => {\n            return prevState.filter((item) => item.id !== id);\n        });\n    };\n\n    // Utils\n    // alphabet\n    const _ALPHABETLETTERS = [\n        \"A\",\n        \"B\",\n        \"C\",\n        \"D\",\n        \"E\",\n        \"F\",\n        \"G\",\n        \"H\",\n        \"I\",\n        \"J\",\n        \"K\",\n        \"L\",\n        \"M\",\n        \"N\",\n        \"O\",\n        \"P\",\n        \"Q\",\n        \"R\",\n        \"S\",\n        \"T\",\n        \"U\",\n        \"V\",\n        \"W\",\n        \"X\",\n        \"Y\",\n        \"Z\",\n    ];\n    // months\n    const _MONTHS = [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\",\n    ];\n    // defing month from emplyyes dob\n    const defineMonth = (month) => {\n        switch (month + 1) {\n            case 1:\n                return \"January\";\n            case 2:\n                return \"February\";\n            case 3:\n                return \"March\";\n            case 4:\n                return \"April\";\n            case 5:\n                return \"May\";\n            case 6:\n                return \"June\";\n            case 7:\n                return \"July\";\n            case 8:\n                return \"August\";\n            case 9:\n                return \"September\";\n            case 10:\n                return \"October\";\n            case 11:\n                return \"November\";\n            case 12:\n                return \"December\";\n            default:\n                return null;\n        }\n    };\n    // format date\n    const formatDate = (date) => {\n        const d = new Date(Date.parse(date));\n        return `${d.getDate()} ${defineMonth(\n            d.getMonth()\n        )}, ${d.getFullYear()} year`;\n    };\n    // get month from employyes dob\n    const getEmployeeDobMonth = (employeeDob) => {\n        const d = new Date(Date.parse(employeeDob));\n        return `${defineMonth(d.getMonth())}`;\n    };\n\n    const view = (\n        <Context.Provider\n            value={{\n                employees,\n                setEmployees,\n                checkedEmployees,\n                setCheckedEmployees,\n                addToCheckedEmployees,\n                removeFromCheckedEmployees,\n                // constants\n                _ALPHABETLETTERS,\n                _MONTHS,\n                //work with date\n                formatDate,\n                getEmployeeDobMonth,\n            }}\n        >\n            <Employees employees={employees} />\n            <EmployeesDob checkedEmployees={checkedEmployees} />\n        </Context.Provider>\n    );\n\n    // error loading content determinant\n    const errorMessage = isError ? <Err /> : null;\n    const loadingMessage = loading ? <Loading /> : null;\n    const content = !(loading || isError) ? view : null;\n\n    return (\n        <div className=\"app\">\n            {errorMessage}\n            {loadingMessage}\n            {content}\n        </div>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/app\";\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}